{"version":3,"sources":["pages/home/Home.module.css","components/Navbar.module.css","pages/signup/Signup.module.css","pages/login/Login.module.css","firebase/config.js","context/AuthContext.js","hooks/useAuthContext.js","piggybank.svg","components/Navbar.js","hooks/useLogout.js","hooks/useFirestore.js","pages/home/TransactionForm.js","pages/home/TransactionList.js","pages/home/Home.js","hooks/useCollection.js","pages/signup/Signup.js","hooks/useSignup.js","pages/login/Login.js","hooks/useLogin.js","App.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectFirestore","firestore","projectAuth","auth","timestamp","Timestamp","AuthContext","createContext","authReducer","state","action","type","user","payload","authIsReady","AuthContextProvider","children","useReducer","dispatch","useEffect","unsub","onAuthStateChanged","Provider","value","useAuthContext","context","useContext","Error","Navbar","logout","useState","isCancelled","setIsCancelled","error","setError","isPending","setIsPending","a","signOut","console","log","message","useLogout","className","styles","navbar","title","src","logo","alt","links","to","displayName","onClick","initialState","document","success","firestoreReducer","useFirestore","collection","response","setisCancelled","ref","dispatchIfNotCancelled","addDocument","doc","createdAt","fromDate","Date","add","addedDocument","deleteDocument","id","delete","TransactionForm","uid","name","setName","amount","setAmount","onSubmit","e","preventDefault","required","onChange","target","TransactionList","transactions","map","transaction","Home","_query","_orderBy","documents","setDocuments","query","useRef","current","orderBy","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","push","data","useCollection","container","content","sidebar","Signup","setDisplayName","email","setEmail","password","setPassword","signUp","createUserWithEmailAndPassword","updateProfile","useSignup","disabled","Login","login","signInWithEmailAndPassword","useLogin","App","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.028abf12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__14Pwa\",\"content\":\"Home_content__Np9-y\",\"sidebar\":\"Home_sidebar__1xCdv\",\"transactions\":\"Home_transactions__12Nqw\",\"name\":\"Home_name__2ixiZ\",\"amount\":\"Home_amount__3E-Q7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1so6j\",\"title\":\"Navbar_title__12Hdy\",\"user-links\":\"Navbar_user-links__3W8_1\",\"links\":\"Navbar_links__2HUjb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signup-form\":\"Signup_signup-form__32u7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login-form\":\"Login_login-form__2qCwJ\"};","import firebase from \"firebase/app\";\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAnDzW_385F-ftEydjA8jB57knH6iJfYdw\",\r\n    authDomain: \"cash-flow-9cc5e.firebaseapp.com\",\r\n    projectId: \"cash-flow-9cc5e\",\r\n    storageBucket: \"cash-flow-9cc5e.appspot.com\",\r\n    messagingSenderId: \"27566951949\",\r\n    appId: \"1:27566951949:web:04a03f7786e7d6326c0f44\"\r\n  };\r\n\r\n// init firebase\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\n// init service\r\nconst projectFirestore = firebase.firestore()\r\nconst projectAuth = firebase.auth()\r\n\r\n// firebase timestamp - a special datatype from firebase called a firebase timestamp which returns to us a function and when we invoke that function in the future then it's going to create us a timestamp data property (a special type of data property used in firestore databases) because we don't just send through a date object because if we do that firestore won't be able to order them correctly so instead we pass through a timestamp object which will be created when we invoke this function\r\nconst timestamp = firebase.firestore.Timestamp\r\n\r\nexport { projectFirestore, projectAuth, timestamp }","import { createContext, useEffect, useReducer } from \"react\";\r\nimport { projectAuth } from '../firebase/config'\r\n\r\nconst AuthContext = createContext()\r\n\r\nconst authReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'LOGIN': // 4. so now all we need to do is dispatch this action from somewhere (go back to useSignup.js)\r\n      return { ...state, user: action.payload }\r\n    case 'LOGOUT':\r\n      return { ...state, user: null }\r\n    case 'AUTH_IS_READY':\r\n      return { ...state, user: action.payload, authIsReady: true }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// when we update the state the component is re-evluated meaning it runs again\r\nconst AuthContextProvider = ({ children }) => {\r\nconst [state, dispatch] = useReducer(authReducer, {\r\n    user: null,\r\n    authIsReady: false\r\n})\r\n\r\n\r\n\r\n// on component first render fire useEffect to perform a check with Firebase to see if a user is logged in\r\nuseEffect(() => {\r\n  // this function communicates with firebase at asks Firebase to tell it whenever there's some kind of change in authentication status and when there is it's going to fire it's function and inside this function we take in the user. So if the authentication change is when a user just logs in - this function will fire and we get that user object back. If the authentication change is when a user logs out - this function will fire and the user object will be null ok? \r\n  \r\n  // now also this function is going to fire once when we first ask Firebase this question as well so when we first connect to Firebase Firebase is going to look to see if we either have a user or we dont (there's either a user is logged in or there's not) but it's going to send back an initial response and when it does that onAuthStateChanged fires it's function and we're either going to have a user in that response or we're just going to have null as a value\r\n\r\n  // so this method again - it fires the function once when we first communicate with Firebase to check for the user to begin with when we first reload the page and then also everytime there is a change in the user authentication so in the future if a user has logged out - then it's going to send back that information to us and fire this function wherby the user object will be null - if in the future a user logs in - again it's going to send that information back to us and it's going to fire this function and the user object will be the user that has just logged in\r\n\r\n  // now there's one more step to this like i said a minute ago this function is going to fire everytime there is some kind of authentication state change so if in the future after we've performed this initial check a user logs in or out - we're also going to fire this function then and we're going to dispatch this 'AUTH_IS_READY' function then as well and we don't need to do that anymore - we only need to do this once initially to find out the initial user so how do we then cancel this kind of subscription to authentication status once we've performed this dispatch once initially - well like when we had a subscription to realtime data in firestore and we got an unsubscribe function returned to us, we get the same thing right here so invoking the onAuthStateChanged method on the projectAuth object returns to us a function which we can store in a const called unsub and when we invoke this function it unsubscribes from the onAuthStateChanged listener so that means for every authentication change in the future - once we unsubscribe - it no longer fires it's callback function\r\n\r\n  // so after it fires once and we perform the dispatch to say look 'AUTH_IS_READY' - then we want to unsubscribe and we can just invoke unsub and now it's never going to fire again so we just perform this check once to begin with\r\n  const unsub = projectAuth.onAuthStateChanged((user) => {\r\n     dispatch({ type: 'AUTH_IS_READY', payload: user })\r\n     unsub()\r\n  })\r\n}, [])\r\n\r\n\r\n\r\n\r\n// 7. so now we're updating the user in our auth context state to be the user who is logged in when they've signed up \r\n  return (\r\n    <AuthContext.Provider value={{ ...state, dispatch }} >\r\n      { children }\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport { AuthContext, AuthContextProvider, authReducer }\r\n\r\n\r\n// So after we sign up with Firebase - Firebase logs the user in and sends back the user object. So we can update our Context to log them in on the front-end too and store that user object in our Context for as long as they are logged in\r\n\r\n// that way whilst the user is logged in - any component can access that user from the Context if they needed to so the first thing we'll do is make a case for a 'LOGIN' action inside of our switch statement","import { AuthContext } from \"../context/AuthContext\";\r\nimport { useContext } from \"react\";\r\n\r\nconst useAuthContext = () => {\r\n  const context = useContext(AuthContext)\r\n\r\n  if (!context) {\r\n    throw Error('useAuthContext must be inside an AuthContextProvider')\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nexport { useAuthContext }","export default __webpack_public_path__ + \"static/media/piggybank.3ee328fe.svg\";","import { Link } from 'react-router-dom'\r\nimport { useLogout } from '../hooks/useLogout';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\n\r\n// logo\r\nimport logo from '../piggybank.svg'\r\n\r\n// styles\r\nimport styles from './Navbar.module.css'\r\n\r\nconst Navbar = () => {\r\nconst { logout } = useLogout()\r\nconst { user } = useAuthContext()\r\n\r\n  return (\r\n    <nav className={styles.navbar}>\r\n      <ul>\r\n        <li className={styles.title}>\r\n           <img src={logo} alt=\"piggy bank\" />\r\n           <h3>CashFlow</h3>\r\n        </li>\r\n        {!user && (\r\n          <div className={styles.links}>\r\n            <li><Link to=\"/login\">Login</Link></li>\r\n            <li><Link to=\"/signup\">Sign Up</Link></li>      \r\n          </div>\r\n        )}\r\n\r\n        {user && (\r\n          <div className={styles['user-links']} >\r\n            <li>hello, {user.displayName}</li>\r\n            <li><button onClick={logout} >Logout</button></li>\r\n          </div>\r\n        )}\r\n\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar\r\n","import { useState, useEffect } from \"react\"\r\nimport { projectAuth } from \"../firebase/config\"\r\nimport { useAuthContext } from \"./useAuthContext\"\r\n\r\nconst useLogout = () => {\r\n    // cleanup function state\r\n    const [isCancelled, setIsCancelled] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [isPending, setIsPending] = useState(false)\r\n    const { dispatch } = useAuthContext()\r\n\r\n    const logout = async() => {\r\n        setError(null)\r\n        setIsPending(true)\r\n       \r\n        // sign the user out\r\n        try {\r\n            // signs the user out on from the Firebase server - it's going to wait right here until it completes this before it moves on - that's why we have the await keyword so that it doesn't move on and try to dispatch the action before the user is signed out\r\n            await projectAuth.signOut()\r\n\r\n            // dispatch logout action to log user out of our local state - we don't need to pass in a payload here because we don't need to set the user to be anything other thasn null - if they logout - the user becomes null right? so the payload we can just skip\r\n            dispatch({ type: 'LOGOUT' })\r\n\r\n            // update state\r\n            if (!isCancelled) {\r\n              setIsPending(false)\r\n              setError(null)\r\n            }\r\n\r\n\r\n        } catch (err) {\r\n            if (!isCancelled) {\r\n              console.log(err.message)\r\n              setError(err.message)\r\n              setIsPending(false)\r\n            }\r\n        }\r\n    }\r\n    \r\n    // cleanup function\r\n    useEffect(() => {\r\n        return () => setIsCancelled(true)\r\n    }, [])\r\n\r\n    return { error, isPending, logout }\r\n\r\n}\r\n\r\nexport { useLogout }","import { useReducer, useEffect, useState } from \"react\"\r\nimport { projectFirestore, timestamp } from \"../firebase/config\"\r\n\r\nlet initialState = {\r\n  document: null,\r\n  isPending: false,\r\n  error: null,\r\n  success: null\r\n}\r\n\r\nconst firestoreReducer = (state, action) => {\r\n  switch(action.type) {\r\n    case 'IS_PENDING':\r\n      return { isPending: true, document: null, success: false, error: null }\r\n    case 'ADDED_DOCUMENT':\r\n      return { isPending: false, document: action.payload, success: true, error: null }\r\n    case 'DELETE_DOCUMENT':\r\n      return { isPending: false, document: null, success: false, error: null }\r\n    case 'ERROR':\r\n      return { isPending: false, document: null, success: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst useFirestore = (collection) => {\r\n  const [response, dispatch] = useReducer(firestoreReducer, initialState)\r\n  const [isCancelled, setisCancelled] = useState(false)\r\n\r\n  // collection ref\r\n  const ref = projectFirestore.collection(collection)\r\n\r\n  // only dispatch if not cancelled\r\n  const dispatchIfNotCancelled = (action) => {\r\n    if (!isCancelled) {\r\n      dispatch(action)\r\n    }\r\n  }\r\n\r\n  // add document\r\n  const addDocument = async (doc) => {\r\n    dispatch({ type: 'IS_PENDING' })\r\n\r\n    try {\r\n     // firestore timestamp\r\n     const createdAt = timestamp.fromDate(new Date())\r\n     const addedDocument = await ref.add({ ...doc, createdAt })\r\n     dispatchIfNotCancelled({ type: 'ADDED_DOCUMENT', payload: addedDocument })\r\n    } catch (err) {\r\n        dispatchIfNotCancelled({ type: 'ERROR', payload: err.message })\r\n    }\r\n  }\r\n\r\n  // delete document\r\n  const deleteDocument = async (id) => {\r\n    dispatch({ type: 'IS_PENDING' })\r\n\r\n    try {\r\n      await ref.doc(id).delete()\r\n      dispatchIfNotCancelled({ type: 'DELETE_DOCUMENT' })\r\n    } catch (err) {\r\n        dispatchIfNotCancelled({ type: 'ERROR', payload: 'could not delete' })\r\n    }\r\n  }\r\n\r\n  // clean up function\r\n  useEffect(() => {\r\n    return () => setisCancelled(true)\r\n  }, [])\r\n\r\n  \r\n  return { addDocument, deleteDocument, response }\r\n}\r\n\r\nexport { useFirestore }\r\n","import { useState, useEffect } from \"react\"\r\nimport { useFirestore } from \"../../hooks/useFirestore\"\r\n\r\nconst TransactionForm = ({ uid }) => {\r\n  const [name, setName] = useState('')\r\n  const [amount, setAmount] = useState('')\r\n  const { addDocument, response } = useFirestore('transactions')\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    addDocument({\r\n        uid,\r\n        name,\r\n        amount,\r\n    })\r\n  }\r\n\r\n  // reset form fields only after successfully added document\r\n  useEffect(() => {\r\n    if (response.success) {\r\n      setName('')\r\n      setAmount('')\r\n    }\r\n  }, [response.success])\r\n\r\n  return (\r\n    <>\r\n      <h3>Add a Transaction</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n            <span>Transaction name:</span>\r\n            <input \r\n            type=\"text\"\r\n            required\r\n            onChange={(e) => setName(e.target.value)}\r\n            value={name}\r\n            />\r\n        </label>\r\n        <label>\r\n            <span>Amount (£):</span>\r\n            <input \r\n            type=\"number\"\r\n            required\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            value={amount}\r\n            />\r\n        </label>\r\n        <button>Add Transaction</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionForm\r\n","import styles from './Home.module.css'\r\nimport { useFirestore } from '../../hooks/useFirestore'\r\n\r\nconst TransactionList = ({ transactions }) => {\r\n  const { deleteDocument } = useFirestore('transactions')\r\n\r\n  return (\r\n    <ul className={styles.transactions} >\r\n      {transactions.map((transaction) => (\r\n        <li key={transaction.id} >\r\n           <p className={styles.name} >{transaction.name}</p>\r\n           <p className={styles.amount} >£{transaction.amount}</p>\r\n           <button onClick={() => deleteDocument(transaction.id)} >X</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TransactionList\r\n","import { useAuthContext } from '../../hooks/useAuthContext'\r\nimport { useCollection } from '../../hooks/useCollection'\r\n\r\n// styles\r\nimport styles from './Home.module.css'\r\n\r\n//components\r\nimport TransactionForm from './TransactionForm'\r\nimport TransactionList from './TransactionList'\r\n\r\nconst Home = () => {\r\n  const { user } = useAuthContext()\r\n  const { documents, error } = useCollection('transactions', [\"uid\", \"==\", user.uid], [\"createdAt\", \"desc\"])\r\n\r\n  return (\r\n    <div className={styles.container} >\r\n        <div className={styles.content} >\r\n           {error && <p className=\"error\">{error}</p>}\r\n           {documents && <TransactionList transactions={documents} />}\r\n        </div>\r\n        <div className={styles.sidebar} >\r\n            <TransactionForm uid={user.uid} />\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useState, useEffect, useRef } from \"react\"\r\nimport { projectFirestore } from \"../firebase/config\"\r\n\r\nconst useCollection = (collection, _query, _orderBy) => {\r\n  const [documents, setDocuments] = useState(null)\r\n  const [error, setError] = useState(null)\r\n\r\n  const query = useRef(_query).current\r\n  const orderBy = useRef(_orderBy).current\r\n\r\n  useEffect(() => {\r\n    let ref = projectFirestore.collection(collection)\r\n\r\n    if (query) {\r\n      ref = ref.where(...query)\r\n    }\r\n    if (orderBy) {\r\n      ref = ref.orderBy(...orderBy)\r\n    }\r\n\r\n    const unsubscribe = ref.onSnapshot((snapshot) => {\r\n      let results = []\r\n      snapshot.docs.forEach((doc) => {\r\n        results.push({...doc.data(), id: doc.id})\r\n      })\r\n      \r\n      // update state\r\n      setDocuments(results)\r\n      setError(null)\r\n    }, (error) => {\r\n      console.log(error)\r\n      setError('Could not fetch data')\r\n    })\r\n\r\n  // unsubscribe on unmount\r\n  return () => unsubscribe()\r\n\r\n  }, [collection, query, orderBy])\r\n\r\n  return { documents, error }\r\n}\r\n\r\nexport { useCollection }","import { useState } from 'react';\r\nimport { useSignup } from '../../hooks/useSignup';\r\n\r\n// styles\r\nimport styles from './Signup.module.css';\r\n\r\nconst Signup = () => {\r\n  const [displayName, setDisplayName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const { signUp, error, isPending } = useSignup()\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    signUp(email, password, displayName);\r\n  };\r\n\r\n  return (\r\n    <form className={styles['signup-form']} onSubmit={handleSubmit}>\r\n      <h2>Sign Up</h2>\r\n      <label>\r\n        <span>username:</span>\r\n        <input\r\n          type='text'\r\n          onChange={(e) => setDisplayName(e.target.value)}\r\n          value={displayName}\r\n        />\r\n      </label>\r\n      <label>\r\n        <span>email:</span>\r\n        <input\r\n          type='email'\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          value={email}\r\n        />\r\n      </label>\r\n      <label>\r\n        <span>password:</span>\r\n        <input\r\n          type='password'\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          value={password}\r\n        />\r\n      </label>\r\n      {!isPending && <button className='btn'>sign up</button>}\r\n      {isPending && <button className=\"btn\" disabled>loading...</button>}\r\n      {error && <p className=\"error\">{error}</p>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import { useState, useEffect } from \"react\"\r\nimport { projectAuth } from '../firebase/config'\r\nimport { useAuthContext } from \"./useAuthContext\"\r\n\r\nconst useSignup = () => {\r\n    // cleanup function state\r\n    const [isCancelled, setIsCancelled] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [isPending, setIsPending] = useState(false)\r\n    // destructure dispatch funtion from hook\r\n    const { dispatch } = useAuthContext()\r\n  \r\n    const signUp = async (email, password, displayName) => {\r\n      setError(null)\r\n      setIsPending(true)\r\n      try {\r\n        // 1. sign up user - this reaches out to firebaseAuth and it tries to sign a user up with an email & password - the createUserWithEmailAndPassword logs a user in on the Firebase server and this method takes in 2 arguments and sends back a response object and on that object is a user property and that will be the user that it just created\r\n        const response = await projectAuth.createUserWithEmailAndPassword(email, password)\r\n        // console.log(response.user)\r\n  \r\n        // 5. So remember i said earlier that when we sign up a user using the createUserWithEmailAndPassword method then Firebase automatically logs that user in and they sign up right? so no only when they login (in the future) but also when they sign up - that will automatically log them in aswell (much like when you go to a website and sign up - once you've signed up you're automatically logged into the website) so what i want to do is take the user that we have here in the response and i want to dispatch a 'LOGIN' action and update the user on our auth state to be this user. Now first of all we're going to get rid of the console.log - we don't need that anymore..\r\n  \r\n\r\n        \r\n        // 2. if it doesn't send a valid response then we need to throw some kind of error\r\n        if (!response) {\r\n          throw new Error('Could not complete sign up')\r\n        }\r\n        // 3. add display name to user - we first need to create the user using the createUserWithEmailAndPassword method and then we can update the user profile using the updateProfile method on the user property (which takes in an object) to set the displayName\r\n        await response.user.updateProfile({ displayName })\r\n  \r\n\r\n\r\n        // 6. and then we're going to dispatch the action down here so after we've updated the displayName now we need to import dispatch first of all from our AuthContext and what we can do is import our useAuthContext hook because we can grab it from the context object that is returned because on our Provider we passed it through as a value - now rememebr we need 2 properties:\r\n  \r\n        // type - which is going to be 'LOGIN'\r\n        // payload - the user in the response\r\n  \r\n        // dispatch login action\r\n        dispatch({type: 'LOGIN', payload: response.user })\r\n  \r\n  \r\n        if (!isCancelled) {\r\n          setIsPending(false)\r\n          setError(null)\r\n        }\r\n  \r\n      } catch (err) {\r\n        if (!isCancelled) {\r\n          console.log(err.message)\r\n          setError(err.message)\r\n          setIsPending(false)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // cleanup function\r\n    useEffect(() => {\r\n      return () => setIsCancelled(true)\r\n  }, [])\r\n  \r\n    return { error, isPending, signUp }\r\n  }\r\n  \r\n  export { useSignup }\r\n  \r\n  \r\n  // After we sign up we get back a user object and this user object contains the JWT for that user which Firebase uses to authenticate them on the firebase server. That token is passed back n forth from our website to Firebase on every request (for something like data from the database)\r\n  \r\n  // Whenever Firebase recieves a request with a valid token - it see's that user as being logged in or authenticated but we can also use that user object in our front-end application to do serveral things aswell - we can:\r\n  \r\n  // Protect content or pages from users that are not logged in so they don't see them \r\n  // Show different content to users who are logged in than those who are not\r\n  // Use the data on the user object like the email or displayName\r\n  \r\n  // So ideally, we want to store this user object in some kind of \"Global State\" when the user is logged in and for that we'll be using react Context.","import { useState } from 'react';\r\nimport { useLogin } from '../../hooks/useLogin';\r\n\r\n// styles\r\nimport styles from './Login.module.css';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const { login, error, isPending } = useLogin()\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    login(email, password);\r\n  };\r\n\r\n  return (\r\n    <form className={styles['login-form']} onSubmit={handleSubmit}>\r\n      <h2>Login</h2>\r\n      <label>\r\n        <span>email:</span>\r\n        <input\r\n          type='email'\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          value={email}\r\n        />\r\n      </label>\r\n      <label>\r\n        <span>password:</span>\r\n        <input\r\n          type='password'\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          value={password}\r\n        />\r\n      </label>\r\n      {!isPending && <button className='btn'>Login</button>}\r\n      {isPending && <button className=\"btn\" disabled>loading...</button>}\r\n      {error && <p className=\"error\">{error}</p>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useEffect } from \"react\"\r\nimport { projectAuth } from \"../firebase/config\"\r\nimport { useAuthContext } from \"./useAuthContext\"\r\n\r\nconst useLogin = () => {\r\n    // cleanup function state\r\n    const [isCancelled, setIsCancelled] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [isPending, setIsPending] = useState(false)\r\n    const { dispatch } = useAuthContext()\r\n\r\n    const login = async(email, password) => {\r\n        setError(null)\r\n        setIsPending(true)\r\n       \r\n        // log the user in\r\n        try {\r\n            // this reaches out to firebaseAuth and it tries to sign a user in and the signInWithEmailAndPassword method takes in 2 arguments and returns a response object and on this response object is a user property\r\n            const response = await projectAuth.signInWithEmailAndPassword(email, password)\r\n\r\n            // and that user is what we specify to be the payload of the dispatch action and that means that it's going to update our AuthContext state to be this user\r\n            dispatch({ type: 'LOGIN', payload: response.user })\r\n\r\n            // update state\r\n            if (!isCancelled) {\r\n              setIsPending(false)\r\n              setError(null)\r\n            }\r\n\r\n        } catch (err) {\r\n            if (!isCancelled) {\r\n              setError(err.message)\r\n              console.log(err.message)\r\n              setIsPending(false)\r\n            }\r\n        }\r\n    }\r\n    \r\n    // cleanup function\r\n    useEffect(() => {\r\n        return () => setIsCancelled(true)\r\n    }, [])\r\n\r\n    return { error, isPending, login }\r\n\r\n}\r\n\r\nexport { useLogin }","import { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { useAuthContext } from './hooks/useAuthContext';\n\n// components\nimport Navbar from './components/Navbar';\n\n// page components\nimport Home from './pages/home/Home'\nimport Signup from './pages/signup/Signup'\nimport Login from './pages/login/Login'\n\n// styles\nimport './App.css'\n\nfunction App() {\n  const { authIsReady, user } = useAuthContext()\n\n  return (\n    <div className=\"App\">\n      {authIsReady && (\n        <HashRouter>\n            <Navbar />\n            <Switch>\n              <Route exact path=\"/\">\n                {!user && <Redirect to=\"/login\" />}\n                {user && <Home />}\n              </Route>\n              <Route path=\"/signup\">\n                {user && <Redirect to=\"/\" />}\n                {!user && <Signup />}\n              </Route>\n              <Route path=\"/login\">\n                {user && <Redirect to=\"/\" />}\n                {!user && <Login />}\n              </Route>\n            </Switch>\n        </HashRouter>\n       )}\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AuthContextProvider } from './context/AuthContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthContextProvider>\n      <App />\n    </AuthContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}